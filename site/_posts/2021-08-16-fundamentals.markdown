---
layout: post
title:  "There's no fun in fundamentals"
date:   2021-08-16 3:13:25 +1000
categories: rant 
featuredPost: true
excerpt: But there is fun in fundamentals! I know, I know. If you have a little bit of time, I'd like to explore it a little further. 
---

Please excuse the bad humour in the title. It's 2AM and I just had a flash of inspiration to write down my thoughts. Just a little food for thought for those who want to or need to hear it. No TL;DR for this one. Full warning, I'm taking you for a long ride, so buckle up.

(Un)Fortunately, recent developments in my life have sort of forced me out of my comfort zone and into this uh-oh-panic zone.
Why? Simple. Job Interviews - more specifically, algorithms. I know. Yuck. Well... actually, now that I've been studying them for a couple of weeks, algorithmic thinking is actually kinda cool. What's not cool, is staying up to 2AM and furiously sipping my tea because I can't seem to figure what's wrong with my code. Anyway, I digress. To keep things short, I'm going to be out in the job market again. And in the tech industry, job interviews usually mean code interviews. For those who have the pleasure of not knowing the kind of nerve-wracking life-altering experience that can be, good for you. I'm happy for you. Please pray for me if you have time. If you don't that's okay too. Just know any love is appreciated so please send them my way.
Yeah. So, code interviews for junior devs, in general, involve being given a computational problem and coming up with an algorithm to provide a solution to said problem. This usually happens one on one with a senior dev. Imagine doing a math test alone in a room with your teacher as they breathe down your neck judging everything you write. That pretty is what it feels like. That being said, coming up with a "correct" solution isn't usually the goal - it's really meant to help the senior developer gauge your coding ability and communication skills. And if they're adequate, you get the job (over-simplification, but you get it).

The real reason they stress me out though is actually quite simple. Because I suck at them. But Hugh! "You've graduated with a degree in computer science and you have been out in the industry for 8+ months now, these should be easy for you", I hear you say. Well, my dear friend, if only it were that simple. Here's the deal, no matter what anybody tells you, you can't escape the code interviews. Sure they're not perfect, but don't let anyone dissuade you from taking them seriously. Here's why:
Coding interviews are good in theory as it's an easy way to determine problem-solving and programming ability via an algorithmic challenge. In practice, most jobs teach junior developers skills that revolve around the business product, not algorithmic thinking.

There's a lot of different mindsets when it comes to these interviews. Some employers see more value in conducting different types of interviews. For instance, they could get you to explain your past projects and your experience with a certain technology. They could also give you a take-home assignment and give you a week to do it. There's pros and cons to each kind of interview. But chances are if you're looking to find a role at say Google or Netflix, you're not going to escape the coding interview. And let's be honest, mid-size/ smaller companies tend to just do what the big tech companies do. So not only do I need to keep a fairly well-documented updated portfolio I also need to go do some studying. Cue dramatic groans.
It's important to me that I have a job to support myself so let the study begin. A popular tool that you can use for these algorithmic challenges are sites like LeetCode and Hackerrank. They basically just provide and categorize a whole bunch of questions for you to practice. There are even little discussion boards if you get stuck. So I sat down one afternoon and booted up a random question. And boy. It took me a whole 10 seconds to start questioning my existence. "This is an easy question?!" I thought to myself. I tried for about another 15 minutes before I gave up and scrolled to the discussion board. I scanned through the forums until I hit a sample answer someone had posted. And let me tell you, the answer was easy to follow and everything seemed to clear up as soon as I read it. Oh of course! This makes sense, why didn't I think of that? So I basically copied it and pressed submit. It passed and I gave myself a pat on the back. 15 minutes into the next question, I was already on the discussion board trying to find another answer.

Was this how it was supposed to be? I was used to googling for solutions or reading code snippets on StackOverflow, so it felt very natural to me to rely on other people's solutions. The real problem is that I won't have that luxury in the interview. And here I was, basically copying other peoples answers to these easy problems because I can't do them myself. If I kept doing what I was doing, I'd just wasting my time. And I'll admit, it didn't feel good. I got caught with my pants down. I was embarrassed, upset and frustrated. Every time I went to tackle a question, I was totally stumped. I can't even think of where to begin. So I gave up.

But not completely. I did some reflection and thought about why exactly I couldn't do the problems. Perhaps it was my problem-solving ability. So I went to do some reading. I picked up a book - 'How to think like a programmer and honestly, it was an eye-opener. I realised that problem solving wasn't something intuitive and fluid. It can something concrete and you could utilise a framework. And for someone who was lost and just needed to be put in a direction. It was perfect. I had some success afterwards, I could get through some of the really really basic problems but anything above that was back to struggle street.

I kind of floated around after that. Not really sure where to go. I didn't just give up and do nothing, mind you. In the meantime, I was juggling work, side projects and a life outside of work. Luckily for me, light bulb moments tend to hit when you're not looking. For me, there was one particular instance that really hit the nail in the head.

In my time off, I've been re-watching Avatar: The Last Airbender. There's a live-action series coming out soon(ish) so I thought I'd go watch it again. It's great btw. You should get on it if you don't know what I'm talking about. Anyway, there's a scene where Zuko is eager to learn advanced techniques rather than improve his basics. The breath of fire was a basic, essential technique he ignored as he thought it was useless in his quest to capture the Avatar. Ironically, later on, this basic technique was all that stood between life and death. In the season 1 finale, Zuko is finally able to capture the Avatar. Of course, he had to retreat into the wider tundra as he had no means of escape. He quickly realized his mistake and struggled to find adequate shelter from the cold. The scenes made it clear he had far from mastered the breathing technique. His breathing was ragged, his flame weak. If it weren't for plot armour, your boy would have perished. And that's when I realised. My problem was the same as Zuko's I had been so focused on learning all these fancy frameworks and tools for my job, that I had neglected my basics. This was why I was having so much trouble now; I'm missing the basic skills that ultimately should be my bread and butter for my coding career. Unfortunately for me, I don't have plot armour to save me. I needed to get to work.
"I mean, of course, it took you that long to just tell me that? Everyone knows you're supposed to round out your fundamentals!", I hear you say. And you're right! Don't be like me. Focus on the basics! 

Think about most professional athletes! They don't focus on just the matches they play: they do drills; they analyse past games; they go through tactics, they master their fundamentals. They do the work. The same thing goes for software developers. Senior devs have spent hundreds upon hundreds of hours experimenting and exploring. The fundamentals are trivial to them because they live and breathe them. When they hit a problem, they just draw upon the deep experience they have to get them through. But I don't have that. I'm like a little ant standing upon the shoulders of these giants. But there's one thing I can do. Work at it. Work through the fundamentals. Know the theory. Know it off by heart, left-to-right, right-to-left. Ingrain them into me. That's the secret. Well... actually it makes a lot of sense. Maybe I'm dumb for taking so long to figure it out.

The not-so-trivial second part to the problem is staying consistent. It's going to be really hard to keep grinding every day if you don't have a goal, motivation or discipline. So, I implore you (and me) to put the fun back in fundamentals. Enjoy it. Learn to love the pain of making mistakes, cherish the light-bulb moments, be hungry to reach out to new and intimidating topics.

It's been real. Keep it up.

Hugh